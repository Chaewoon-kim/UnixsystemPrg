#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <pthread.h>

#define SHM_SIZE 1024
#define SHM_KEY 0x7130
pthread_mutex_t Mutex = PTHREAD_MUTEX_INITIALIZER;

struct shared_data {
    int flag;
    char message[SHM_SIZE];
};
char inputBuffer[SHM_SIZE]; // 입력을 저장할 변수


void *writerThread(struct shared_data *arg){

    while (1) {
        pthread_mutex_lock(&Mutex);
        strcpy(arg->message, inputBuffer); // read buf
        pthread_mutex_unlock(&Mutex);
        arg->flag = 1; // 메시지를 보냈음을 표시
        usleep(500000); // 0.5초마다 확인
    }
}

void *savedThread(){

    while (1) {
        printf("Client: Enter message to send to server: ");

        pthread_mutex_trylock(&Mutex);
        fgets(inputBuffer, sizeof(inputBuffer), stdin); // buffer set
        pthread_mutex_unlock(&Mutex);

        // 메시지를 버퍼에 저장
        usleep(500000); // 0.5초마다 확인
    }
}

int main() {
    int shmid;
    struct shared_data *shared_memory;
    pthread_t writerThreadId, savedThreadId;

    pthread_mutex_init(&Mutex, NULL); // 뮤텍스 초기화

    // 공유 메모리에 접근

    shmid = shmget(SHM_KEY, sizeof(struct shared_data), 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    // 공유 메모리 연결
    shared_memory = (struct shared_data *)shmat(shmid, NULL, 0);
    if ((void *)shared_memory == (void *)-1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }
    shared_memory->flag = 0;

     if (pthread_create(&savedThreadId, NULL, savedThread, NULL) != 0) {
          perror("패킷 수집 스레드 생성에 실패했습니다.");
          return 1;
        }

    if (pthread_create(&writerThreadId, NULL, writerThread, (void*)shared_memory) != 0) {
          perror("패킷 수집 스레드 생성에 실패했습니다.");
          return 1;
        }
    // 클라이언트는 메시지를 전송

    
    if (pthread_join(writerThreadId, NULL) != 0) {
    printf("패킷 수집 스레드 종료 대기에 실패했습니다.");
    return 1;
    }   

    if (pthread_join(savedThreadId, NULL) != 0) {
    printf("패킷 수집 스레드 종료 대기에 실패했습니다.");
    return 1;
    } 
    // 공유 메모리 연결 해제
    shmdt(shared_memory);
    pthread_mutex_destroy(&Mutex); // 뮤텍스 제거
    return 0;
}
클라
